
GPIO_frist.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000003d2  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  000003d2  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000401  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000e0  00000000  00000000  0000040f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000017fa  00000000  00000000  000004ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008b2  00000000  00000000  00001ce9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000836  00000000  00000000  0000259b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000170  00000000  00000000  00002dd4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000297  00000000  00000000  00002f44  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000070d  00000000  00000000  000031db  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  000038e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000350  00000350  000003c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003978  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.button_init 00000018  000002f2  000002f2  00000366  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.led_intialize 00000018  0000030a  0000030a  0000037e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.Relay_intialize 00000018  00000322  00000322  00000396  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.DIO_VoidSetPinDirection 00000106  000000a8  000000a8  0000011c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.DIO_VoidSetPinValue 00000106  000001ae  000001ae  00000222  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.main    0000003e  000002b4  000002b4  00000328  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.__dummy_fini 00000002  00000358  00000358  000003cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.__dummy_funcs_on_exit 00000002  0000035a  0000035a  000003ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.__dummy_simulator_exit 00000002  0000035c  0000035c  000003d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.exit    00000016  0000033a  0000033a  000003ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text._Exit   00000004  00000354  00000354  000003c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
   8:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
   c:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
  10:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
  14:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
  18:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
  1c:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
  20:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
  24:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
  28:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
  2c:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
  30:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
  34:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
  38:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
  3c:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
  40:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
  44:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
  48:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
  4c:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
  50:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	e4 e5       	ldi	r30, 0x54	; 84
  62:	f0 e0       	ldi	r31, 0x00	; 0
  64:	40 e0       	ldi	r20, 0x00	; 0
  66:	17 c0       	rjmp	.+46     	; 0x96 <__do_clear_bss+0x8>
  68:	b5 91       	lpm	r27, Z+
  6a:	a5 91       	lpm	r26, Z+
  6c:	35 91       	lpm	r19, Z+
  6e:	25 91       	lpm	r18, Z+
  70:	05 91       	lpm	r16, Z+
  72:	07 fd       	sbrc	r16, 7
  74:	0c c0       	rjmp	.+24     	; 0x8e <__do_clear_bss>
  76:	95 91       	lpm	r25, Z+
  78:	85 91       	lpm	r24, Z+
  7a:	ef 01       	movw	r28, r30
  7c:	f9 2f       	mov	r31, r25
  7e:	e8 2f       	mov	r30, r24
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 17       	cp	r26, r18
  86:	b3 07       	cpc	r27, r19
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0x20>
  8a:	fe 01       	movw	r30, r28
  8c:	04 c0       	rjmp	.+8      	; 0x96 <__do_clear_bss+0x8>

0000008e <__do_clear_bss>:
  8e:	1d 92       	st	X+, r1
  90:	a2 17       	cp	r26, r18
  92:	b3 07       	cpc	r27, r19
  94:	e1 f7       	brne	.-8      	; 0x8e <__do_clear_bss>
  96:	e4 35       	cpi	r30, 0x54	; 84
  98:	f4 07       	cpc	r31, r20
  9a:	31 f7       	brne	.-52     	; 0x68 <__do_copy_data+0x8>
  9c:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <main>
  a0:	0c 94 9d 01 	jmp	0x33a	; 0x33a <exit>

000000a4 <_exit>:
  a4:	f8 94       	cli

000000a6 <__stop_program>:
  a6:	ff cf       	rjmp	.-2      	; 0xa6 <__stop_program>

Disassembly of section .text:

00000350 <__bad_interrupt>:
 350:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.button_init:

000002f2 <button_init>:
 * Created: 9/16/2023 1:52:53 AM
 *  Author: ElRapper
 */ 
#include "Button.h"
Ret button_init(uint8_t pinNum, uint8_t port){
	if (DIO_VoidSetPinDirection(pinNum,port,PIN_OUTPUT))
 2f2:	70 e0       	ldi	r23, 0x00	; 0
 2f4:	41 e0       	ldi	r20, 0x01	; 1
 2f6:	50 e0       	ldi	r21, 0x00	; 0
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	0e 94 54 00 	call	0xa8	; 0xa8 <_etext>
 2fe:	89 2b       	or	r24, r25
 300:	11 f0       	breq	.+4      	; 0x306 <button_init+0x14>
	{
		return OK;
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	08 95       	ret
	}
	return NOT_OK;
 306:	80 e0       	ldi	r24, 0x00	; 0
}
 308:	08 95       	ret

Disassembly of section .text.led_intialize:

0000030a <led_intialize>:
 *  Author: ElRapper
 */ 
#include "LED.h"

Ret led_intialize (uint8_t pinNumber, uint8_t port){
	if (DIO_VoidSetPinDirection(pinNumber,port,PIN_OUTPUT))
 30a:	70 e0       	ldi	r23, 0x00	; 0
 30c:	41 e0       	ldi	r20, 0x01	; 1
 30e:	50 e0       	ldi	r21, 0x00	; 0
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	0e 94 54 00 	call	0xa8	; 0xa8 <_etext>
 316:	89 2b       	or	r24, r25
 318:	11 f0       	breq	.+4      	; 0x31e <led_intialize+0x14>
	{
		return OK;
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	08 95       	ret
	}
	return NOT_OK;
 31e:	80 e0       	ldi	r24, 0x00	; 0
}
 320:	08 95       	ret

Disassembly of section .text.Relay_intialize:

00000322 <Relay_intialize>:
 *  Author: ElRapper
 */ 
#include "Relay.h"

Ret Relay_intialize (uint8_t pinNumber, uint8_t port){
	if (DIO_VoidSetPinDirection(pinNumber,port,PIN_OUTPUT))
 322:	70 e0       	ldi	r23, 0x00	; 0
 324:	41 e0       	ldi	r20, 0x01	; 1
 326:	50 e0       	ldi	r21, 0x00	; 0
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	0e 94 54 00 	call	0xa8	; 0xa8 <_etext>
 32e:	89 2b       	or	r24, r25
 330:	11 f0       	breq	.+4      	; 0x336 <Relay_intialize+0x14>
	{
		return OK;
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	08 95       	ret
	}
	return NOT_OK;
 336:	80 e0       	ldi	r24, 0x00	; 0
}
 338:	08 95       	ret

Disassembly of section .text.DIO_VoidSetPinDirection:

000000a8 <DIO_VoidSetPinDirection>:
#include "DIO_interface.h"
#include "../../Utilities/Regiseters.h"
#include "DIO_config.h"
#if Dio_cfg
Ret DIO_VoidSetPinDirection (uint8_t copy_u8PORT, uint8_t copy_u8PIN, uint8_t Direction){
	if (copy_u8PIN>=MAX_PIN)
  a8:	68 30       	cpi	r22, 0x08	; 8
  aa:	08 f0       	brcs	.+2      	; 0xae <DIO_VoidSetPinDirection+0x6>
  ac:	78 c0       	rjmp	.+240    	; 0x19e <DIO_VoidSetPinDirection+0xf6>
	{
		return NOT_OK;
	}
	
	if(Direction==PIN_OUTPUT){
  ae:	41 30       	cpi	r20, 0x01	; 1
  b0:	c1 f5       	brne	.+112    	; 0x122 <DIO_VoidSetPinDirection+0x7a>
		
		switch (copy_u8PORT){
  b2:	81 30       	cpi	r24, 0x01	; 1
  b4:	91 f0       	breq	.+36     	; 0xda <DIO_VoidSetPinDirection+0x32>
  b6:	28 f0       	brcs	.+10     	; 0xc2 <DIO_VoidSetPinDirection+0x1a>
  b8:	82 30       	cpi	r24, 0x02	; 2
  ba:	d9 f0       	breq	.+54     	; 0xf2 <DIO_VoidSetPinDirection+0x4a>
  bc:	83 30       	cpi	r24, 0x03	; 3
  be:	29 f1       	breq	.+74     	; 0x10a <DIO_VoidSetPinDirection+0x62>
  c0:	70 c0       	rjmp	.+224    	; 0x1a2 <DIO_VoidSetPinDirection+0xfa>
			case PORT_A : SET_BIT(DDRA,copy_u8PIN);break;
  c2:	2a b3       	in	r18, 0x1a	; 26
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	02 c0       	rjmp	.+4      	; 0xce <DIO_VoidSetPinDirection+0x26>
  ca:	88 0f       	add	r24, r24
  cc:	99 1f       	adc	r25, r25
  ce:	6a 95       	dec	r22
  d0:	e2 f7       	brpl	.-8      	; 0xca <DIO_VoidSetPinDirection+0x22>
  d2:	82 2b       	or	r24, r18
  d4:	8a bb       	out	0x1a, r24	; 26
				case PORT_C : CLR_BIT(DDRC,copy_u8PIN);break;
				case PORT_D : CLR_BIT(DDRD,copy_u8PIN);break;
			}
			
	}
	return OK;
  d6:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	if(Direction==PIN_OUTPUT){
		
		switch (copy_u8PORT){
			case PORT_A : SET_BIT(DDRA,copy_u8PIN);break;
  d8:	08 95       	ret
			case PORT_B : SET_BIT(DDRB,copy_u8PIN);break;
  da:	27 b3       	in	r18, 0x17	; 23
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <DIO_VoidSetPinDirection+0x3e>
  e2:	88 0f       	add	r24, r24
  e4:	99 1f       	adc	r25, r25
  e6:	6a 95       	dec	r22
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <DIO_VoidSetPinDirection+0x3a>
  ea:	82 2b       	or	r24, r18
  ec:	87 bb       	out	0x17, r24	; 23
				case PORT_C : CLR_BIT(DDRC,copy_u8PIN);break;
				case PORT_D : CLR_BIT(DDRD,copy_u8PIN);break;
			}
			
	}
	return OK;
  ee:	81 e0       	ldi	r24, 0x01	; 1
	
	if(Direction==PIN_OUTPUT){
		
		switch (copy_u8PORT){
			case PORT_A : SET_BIT(DDRA,copy_u8PIN);break;
			case PORT_B : SET_BIT(DDRB,copy_u8PIN);break;
  f0:	08 95       	ret
			case PORT_C : SET_BIT(DDRC,copy_u8PIN);break;
  f2:	24 b3       	in	r18, 0x14	; 20
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	02 c0       	rjmp	.+4      	; 0xfe <DIO_VoidSetPinDirection+0x56>
  fa:	88 0f       	add	r24, r24
  fc:	99 1f       	adc	r25, r25
  fe:	6a 95       	dec	r22
 100:	e2 f7       	brpl	.-8      	; 0xfa <DIO_VoidSetPinDirection+0x52>
 102:	82 2b       	or	r24, r18
 104:	84 bb       	out	0x14, r24	; 20
				case PORT_C : CLR_BIT(DDRC,copy_u8PIN);break;
				case PORT_D : CLR_BIT(DDRD,copy_u8PIN);break;
			}
			
	}
	return OK;
 106:	81 e0       	ldi	r24, 0x01	; 1
	if(Direction==PIN_OUTPUT){
		
		switch (copy_u8PORT){
			case PORT_A : SET_BIT(DDRA,copy_u8PIN);break;
			case PORT_B : SET_BIT(DDRB,copy_u8PIN);break;
			case PORT_C : SET_BIT(DDRC,copy_u8PIN);break;
 108:	08 95       	ret
			case PORT_D : SET_BIT(DDRD,copy_u8PIN);break;
 10a:	21 b3       	in	r18, 0x11	; 17
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	02 c0       	rjmp	.+4      	; 0x116 <DIO_VoidSetPinDirection+0x6e>
 112:	88 0f       	add	r24, r24
 114:	99 1f       	adc	r25, r25
 116:	6a 95       	dec	r22
 118:	e2 f7       	brpl	.-8      	; 0x112 <DIO_VoidSetPinDirection+0x6a>
 11a:	82 2b       	or	r24, r18
 11c:	81 bb       	out	0x11, r24	; 17
				case PORT_C : CLR_BIT(DDRC,copy_u8PIN);break;
				case PORT_D : CLR_BIT(DDRD,copy_u8PIN);break;
			}
			
	}
	return OK;
 11e:	81 e0       	ldi	r24, 0x01	; 1
		
		switch (copy_u8PORT){
			case PORT_A : SET_BIT(DDRA,copy_u8PIN);break;
			case PORT_B : SET_BIT(DDRB,copy_u8PIN);break;
			case PORT_C : SET_BIT(DDRC,copy_u8PIN);break;
			case PORT_D : SET_BIT(DDRD,copy_u8PIN);break;
 120:	08 95       	ret
		}
		
	}
	else if(Direction==PIN_INPUT){
 122:	41 11       	cpse	r20, r1
 124:	40 c0       	rjmp	.+128    	; 0x1a6 <DIO_VoidSetPinDirection+0xfe>
			switch (copy_u8PORT){
 126:	81 30       	cpi	r24, 0x01	; 1
 128:	99 f0       	breq	.+38     	; 0x150 <DIO_VoidSetPinDirection+0xa8>
 12a:	28 f0       	brcs	.+10     	; 0x136 <DIO_VoidSetPinDirection+0x8e>
 12c:	82 30       	cpi	r24, 0x02	; 2
 12e:	e9 f0       	breq	.+58     	; 0x16a <DIO_VoidSetPinDirection+0xc2>
 130:	83 30       	cpi	r24, 0x03	; 3
 132:	41 f1       	breq	.+80     	; 0x184 <DIO_VoidSetPinDirection+0xdc>
 134:	3a c0       	rjmp	.+116    	; 0x1aa <DIO_VoidSetPinDirection+0x102>
				case PORT_A : CLR_BIT(DDRA,copy_u8PIN);break;
 136:	2a b3       	in	r18, 0x1a	; 26
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	02 c0       	rjmp	.+4      	; 0x142 <DIO_VoidSetPinDirection+0x9a>
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	6a 95       	dec	r22
 144:	e2 f7       	brpl	.-8      	; 0x13e <DIO_VoidSetPinDirection+0x96>
 146:	80 95       	com	r24
 148:	82 23       	and	r24, r18
 14a:	8a bb       	out	0x1a, r24	; 26
				case PORT_C : CLR_BIT(DDRC,copy_u8PIN);break;
				case PORT_D : CLR_BIT(DDRD,copy_u8PIN);break;
			}
			
	}
	return OK;
 14c:	81 e0       	ldi	r24, 0x01	; 1
		}
		
	}
	else if(Direction==PIN_INPUT){
			switch (copy_u8PORT){
				case PORT_A : CLR_BIT(DDRA,copy_u8PIN);break;
 14e:	08 95       	ret
				case PORT_B : CLR_BIT(DDRB,copy_u8PIN);break;
 150:	27 b3       	in	r18, 0x17	; 23
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	02 c0       	rjmp	.+4      	; 0x15c <DIO_VoidSetPinDirection+0xb4>
 158:	88 0f       	add	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	6a 95       	dec	r22
 15e:	e2 f7       	brpl	.-8      	; 0x158 <DIO_VoidSetPinDirection+0xb0>
 160:	80 95       	com	r24
 162:	82 23       	and	r24, r18
 164:	87 bb       	out	0x17, r24	; 23
				case PORT_C : CLR_BIT(DDRC,copy_u8PIN);break;
				case PORT_D : CLR_BIT(DDRD,copy_u8PIN);break;
			}
			
	}
	return OK;
 166:	81 e0       	ldi	r24, 0x01	; 1
		
	}
	else if(Direction==PIN_INPUT){
			switch (copy_u8PORT){
				case PORT_A : CLR_BIT(DDRA,copy_u8PIN);break;
				case PORT_B : CLR_BIT(DDRB,copy_u8PIN);break;
 168:	08 95       	ret
				case PORT_C : CLR_BIT(DDRC,copy_u8PIN);break;
 16a:	24 b3       	in	r18, 0x14	; 20
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	02 c0       	rjmp	.+4      	; 0x176 <DIO_VoidSetPinDirection+0xce>
 172:	88 0f       	add	r24, r24
 174:	99 1f       	adc	r25, r25
 176:	6a 95       	dec	r22
 178:	e2 f7       	brpl	.-8      	; 0x172 <DIO_VoidSetPinDirection+0xca>
 17a:	80 95       	com	r24
 17c:	82 23       	and	r24, r18
 17e:	84 bb       	out	0x14, r24	; 20
				case PORT_D : CLR_BIT(DDRD,copy_u8PIN);break;
			}
			
	}
	return OK;
 180:	81 e0       	ldi	r24, 0x01	; 1
	}
	else if(Direction==PIN_INPUT){
			switch (copy_u8PORT){
				case PORT_A : CLR_BIT(DDRA,copy_u8PIN);break;
				case PORT_B : CLR_BIT(DDRB,copy_u8PIN);break;
				case PORT_C : CLR_BIT(DDRC,copy_u8PIN);break;
 182:	08 95       	ret
				case PORT_D : CLR_BIT(DDRD,copy_u8PIN);break;
 184:	21 b3       	in	r18, 0x11	; 17
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	02 c0       	rjmp	.+4      	; 0x190 <DIO_VoidSetPinDirection+0xe8>
 18c:	88 0f       	add	r24, r24
 18e:	99 1f       	adc	r25, r25
 190:	6a 95       	dec	r22
 192:	e2 f7       	brpl	.-8      	; 0x18c <DIO_VoidSetPinDirection+0xe4>
 194:	80 95       	com	r24
 196:	82 23       	and	r24, r18
 198:	81 bb       	out	0x11, r24	; 17
			}
			
	}
	return OK;
 19a:	81 e0       	ldi	r24, 0x01	; 1
	else if(Direction==PIN_INPUT){
			switch (copy_u8PORT){
				case PORT_A : CLR_BIT(DDRA,copy_u8PIN);break;
				case PORT_B : CLR_BIT(DDRB,copy_u8PIN);break;
				case PORT_C : CLR_BIT(DDRC,copy_u8PIN);break;
				case PORT_D : CLR_BIT(DDRD,copy_u8PIN);break;
 19c:	08 95       	ret
#include "DIO_config.h"
#if Dio_cfg
Ret DIO_VoidSetPinDirection (uint8_t copy_u8PORT, uint8_t copy_u8PIN, uint8_t Direction){
	if (copy_u8PIN>=MAX_PIN)
	{
		return NOT_OK;
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	08 95       	ret
				case PORT_C : CLR_BIT(DDRC,copy_u8PIN);break;
				case PORT_D : CLR_BIT(DDRD,copy_u8PIN);break;
			}
			
	}
	return OK;
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	08 95       	ret
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	08 95       	ret
 1aa:	81 e0       	ldi	r24, 0x01	; 1
}
 1ac:	08 95       	ret

Disassembly of section .text.DIO_VoidSetPinValue:

000001ae <DIO_VoidSetPinValue>:
Ret DIO_VoidSetPinValue (uint8_t copy_u8PORT, uint8_t copy_u8PIN, uint8_t Value){
	if (copy_u8PIN>=MAX_PIN)
 1ae:	68 30       	cpi	r22, 0x08	; 8
 1b0:	08 f0       	brcs	.+2      	; 0x1b4 <DIO_VoidSetPinValue+0x6>
 1b2:	78 c0       	rjmp	.+240    	; 0x2a4 <DIO_VoidSetPinValue+0xf6>
	{
		return NOT_OK;
	}
	if(Value==PIN_HIGH){
 1b4:	41 30       	cpi	r20, 0x01	; 1
 1b6:	c1 f5       	brne	.+112    	; 0x228 <DIO_VoidSetPinValue+0x7a>
		
		switch (copy_u8PORT){
 1b8:	81 30       	cpi	r24, 0x01	; 1
 1ba:	91 f0       	breq	.+36     	; 0x1e0 <DIO_VoidSetPinValue+0x32>
 1bc:	28 f0       	brcs	.+10     	; 0x1c8 <DIO_VoidSetPinValue+0x1a>
 1be:	82 30       	cpi	r24, 0x02	; 2
 1c0:	d9 f0       	breq	.+54     	; 0x1f8 <DIO_VoidSetPinValue+0x4a>
 1c2:	83 30       	cpi	r24, 0x03	; 3
 1c4:	29 f1       	breq	.+74     	; 0x210 <DIO_VoidSetPinValue+0x62>
 1c6:	70 c0       	rjmp	.+224    	; 0x2a8 <DIO_VoidSetPinValue+0xfa>
			case PORT_A : SET_BIT(PORTA,copy_u8PIN);break;
 1c8:	2b b3       	in	r18, 0x1b	; 27
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <DIO_VoidSetPinValue+0x26>
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	6a 95       	dec	r22
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <DIO_VoidSetPinValue+0x22>
 1d8:	82 2b       	or	r24, r18
 1da:	8b bb       	out	0x1b, r24	; 27
			case PORT_C : CLR_BIT(PORTC,copy_u8PIN);break;
			case PORT_D : CLR_BIT(PORTD,copy_u8PIN);break;
		}
		
	}
	return OK;
 1dc:	81 e0       	ldi	r24, 0x01	; 1
		return NOT_OK;
	}
	if(Value==PIN_HIGH){
		
		switch (copy_u8PORT){
			case PORT_A : SET_BIT(PORTA,copy_u8PIN);break;
 1de:	08 95       	ret
			case PORT_B : SET_BIT(PORTB,copy_u8PIN);break;
 1e0:	28 b3       	in	r18, 0x18	; 24
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <DIO_VoidSetPinValue+0x3e>
 1e8:	88 0f       	add	r24, r24
 1ea:	99 1f       	adc	r25, r25
 1ec:	6a 95       	dec	r22
 1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <DIO_VoidSetPinValue+0x3a>
 1f0:	82 2b       	or	r24, r18
 1f2:	88 bb       	out	0x18, r24	; 24
			case PORT_C : CLR_BIT(PORTC,copy_u8PIN);break;
			case PORT_D : CLR_BIT(PORTD,copy_u8PIN);break;
		}
		
	}
	return OK;
 1f4:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(Value==PIN_HIGH){
		
		switch (copy_u8PORT){
			case PORT_A : SET_BIT(PORTA,copy_u8PIN);break;
			case PORT_B : SET_BIT(PORTB,copy_u8PIN);break;
 1f6:	08 95       	ret
			case PORT_C : SET_BIT(PORTC,copy_u8PIN);break;
 1f8:	25 b3       	in	r18, 0x15	; 21
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <DIO_VoidSetPinValue+0x56>
 200:	88 0f       	add	r24, r24
 202:	99 1f       	adc	r25, r25
 204:	6a 95       	dec	r22
 206:	e2 f7       	brpl	.-8      	; 0x200 <DIO_VoidSetPinValue+0x52>
 208:	82 2b       	or	r24, r18
 20a:	85 bb       	out	0x15, r24	; 21
			case PORT_C : CLR_BIT(PORTC,copy_u8PIN);break;
			case PORT_D : CLR_BIT(PORTD,copy_u8PIN);break;
		}
		
	}
	return OK;
 20c:	81 e0       	ldi	r24, 0x01	; 1
	if(Value==PIN_HIGH){
		
		switch (copy_u8PORT){
			case PORT_A : SET_BIT(PORTA,copy_u8PIN);break;
			case PORT_B : SET_BIT(PORTB,copy_u8PIN);break;
			case PORT_C : SET_BIT(PORTC,copy_u8PIN);break;
 20e:	08 95       	ret
			case PORT_D : SET_BIT(PORTD,copy_u8PIN);break;
 210:	22 b3       	in	r18, 0x12	; 18
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	02 c0       	rjmp	.+4      	; 0x21c <DIO_VoidSetPinValue+0x6e>
 218:	88 0f       	add	r24, r24
 21a:	99 1f       	adc	r25, r25
 21c:	6a 95       	dec	r22
 21e:	e2 f7       	brpl	.-8      	; 0x218 <DIO_VoidSetPinValue+0x6a>
 220:	82 2b       	or	r24, r18
 222:	82 bb       	out	0x12, r24	; 18
			case PORT_C : CLR_BIT(PORTC,copy_u8PIN);break;
			case PORT_D : CLR_BIT(PORTD,copy_u8PIN);break;
		}
		
	}
	return OK;
 224:	81 e0       	ldi	r24, 0x01	; 1
		
		switch (copy_u8PORT){
			case PORT_A : SET_BIT(PORTA,copy_u8PIN);break;
			case PORT_B : SET_BIT(PORTB,copy_u8PIN);break;
			case PORT_C : SET_BIT(PORTC,copy_u8PIN);break;
			case PORT_D : SET_BIT(PORTD,copy_u8PIN);break;
 226:	08 95       	ret
		}
		
	}
	else if(Value==PIN_LOW){
 228:	41 11       	cpse	r20, r1
 22a:	40 c0       	rjmp	.+128    	; 0x2ac <DIO_VoidSetPinValue+0xfe>
		switch (copy_u8PORT){
 22c:	81 30       	cpi	r24, 0x01	; 1
 22e:	99 f0       	breq	.+38     	; 0x256 <DIO_VoidSetPinValue+0xa8>
 230:	28 f0       	brcs	.+10     	; 0x23c <DIO_VoidSetPinValue+0x8e>
 232:	82 30       	cpi	r24, 0x02	; 2
 234:	e9 f0       	breq	.+58     	; 0x270 <DIO_VoidSetPinValue+0xc2>
 236:	83 30       	cpi	r24, 0x03	; 3
 238:	41 f1       	breq	.+80     	; 0x28a <DIO_VoidSetPinValue+0xdc>
 23a:	3a c0       	rjmp	.+116    	; 0x2b0 <DIO_VoidSetPinValue+0x102>
			case PORT_A : CLR_BIT(PORTA,copy_u8PIN);break;
 23c:	2b b3       	in	r18, 0x1b	; 27
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	02 c0       	rjmp	.+4      	; 0x248 <DIO_VoidSetPinValue+0x9a>
 244:	88 0f       	add	r24, r24
 246:	99 1f       	adc	r25, r25
 248:	6a 95       	dec	r22
 24a:	e2 f7       	brpl	.-8      	; 0x244 <DIO_VoidSetPinValue+0x96>
 24c:	80 95       	com	r24
 24e:	82 23       	and	r24, r18
 250:	8b bb       	out	0x1b, r24	; 27
			case PORT_C : CLR_BIT(PORTC,copy_u8PIN);break;
			case PORT_D : CLR_BIT(PORTD,copy_u8PIN);break;
		}
		
	}
	return OK;
 252:	81 e0       	ldi	r24, 0x01	; 1
		}
		
	}
	else if(Value==PIN_LOW){
		switch (copy_u8PORT){
			case PORT_A : CLR_BIT(PORTA,copy_u8PIN);break;
 254:	08 95       	ret
			case PORT_B : CLR_BIT(PORTB,copy_u8PIN);break;
 256:	28 b3       	in	r18, 0x18	; 24
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	02 c0       	rjmp	.+4      	; 0x262 <DIO_VoidSetPinValue+0xb4>
 25e:	88 0f       	add	r24, r24
 260:	99 1f       	adc	r25, r25
 262:	6a 95       	dec	r22
 264:	e2 f7       	brpl	.-8      	; 0x25e <DIO_VoidSetPinValue+0xb0>
 266:	80 95       	com	r24
 268:	82 23       	and	r24, r18
 26a:	88 bb       	out	0x18, r24	; 24
			case PORT_C : CLR_BIT(PORTC,copy_u8PIN);break;
			case PORT_D : CLR_BIT(PORTD,copy_u8PIN);break;
		}
		
	}
	return OK;
 26c:	81 e0       	ldi	r24, 0x01	; 1
		
	}
	else if(Value==PIN_LOW){
		switch (copy_u8PORT){
			case PORT_A : CLR_BIT(PORTA,copy_u8PIN);break;
			case PORT_B : CLR_BIT(PORTB,copy_u8PIN);break;
 26e:	08 95       	ret
			case PORT_C : CLR_BIT(PORTC,copy_u8PIN);break;
 270:	25 b3       	in	r18, 0x15	; 21
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	02 c0       	rjmp	.+4      	; 0x27c <DIO_VoidSetPinValue+0xce>
 278:	88 0f       	add	r24, r24
 27a:	99 1f       	adc	r25, r25
 27c:	6a 95       	dec	r22
 27e:	e2 f7       	brpl	.-8      	; 0x278 <DIO_VoidSetPinValue+0xca>
 280:	80 95       	com	r24
 282:	82 23       	and	r24, r18
 284:	85 bb       	out	0x15, r24	; 21
			case PORT_D : CLR_BIT(PORTD,copy_u8PIN);break;
		}
		
	}
	return OK;
 286:	81 e0       	ldi	r24, 0x01	; 1
	}
	else if(Value==PIN_LOW){
		switch (copy_u8PORT){
			case PORT_A : CLR_BIT(PORTA,copy_u8PIN);break;
			case PORT_B : CLR_BIT(PORTB,copy_u8PIN);break;
			case PORT_C : CLR_BIT(PORTC,copy_u8PIN);break;
 288:	08 95       	ret
			case PORT_D : CLR_BIT(PORTD,copy_u8PIN);break;
 28a:	22 b3       	in	r18, 0x12	; 18
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	02 c0       	rjmp	.+4      	; 0x296 <DIO_VoidSetPinValue+0xe8>
 292:	88 0f       	add	r24, r24
 294:	99 1f       	adc	r25, r25
 296:	6a 95       	dec	r22
 298:	e2 f7       	brpl	.-8      	; 0x292 <DIO_VoidSetPinValue+0xe4>
 29a:	80 95       	com	r24
 29c:	82 23       	and	r24, r18
 29e:	82 bb       	out	0x12, r24	; 18
		}
		
	}
	return OK;
 2a0:	81 e0       	ldi	r24, 0x01	; 1
	else if(Value==PIN_LOW){
		switch (copy_u8PORT){
			case PORT_A : CLR_BIT(PORTA,copy_u8PIN);break;
			case PORT_B : CLR_BIT(PORTB,copy_u8PIN);break;
			case PORT_C : CLR_BIT(PORTC,copy_u8PIN);break;
			case PORT_D : CLR_BIT(PORTD,copy_u8PIN);break;
 2a2:	08 95       	ret
	return OK;
}
Ret DIO_VoidSetPinValue (uint8_t copy_u8PORT, uint8_t copy_u8PIN, uint8_t Value){
	if (copy_u8PIN>=MAX_PIN)
	{
		return NOT_OK;
 2a4:	80 e0       	ldi	r24, 0x00	; 0
 2a6:	08 95       	ret
			case PORT_C : CLR_BIT(PORTC,copy_u8PIN);break;
			case PORT_D : CLR_BIT(PORTD,copy_u8PIN);break;
		}
		
	}
	return OK;
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	08 95       	ret
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	08 95       	ret
 2b0:	81 e0       	ldi	r24, 0x01	; 1
}
 2b2:	08 95       	ret

Disassembly of section .text.main:

000002b4 <main>:
#include "../ECUAL/LED_driver/LED.h"
#include "Regiseters.h"
#include "../ECUAL/Relay_driver/Relay.h"
int main(void)
{
	DIO_VoidSetPinDirection(PORT_A, PIN_1, PIN_OUTPUT);
 2b4:	41 e0       	ldi	r20, 0x01	; 1
 2b6:	50 e0       	ldi	r21, 0x00	; 0
 2b8:	61 e0       	ldi	r22, 0x01	; 1
 2ba:	70 e0       	ldi	r23, 0x00	; 0
 2bc:	80 e0       	ldi	r24, 0x00	; 0
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	0e 94 54 00 	call	0xa8	; 0xa8 <_etext>
	DIO_VoidSetPinValue(PORT_A, PIN_1, PIN_HIGH );
 2c4:	41 e0       	ldi	r20, 0x01	; 1
 2c6:	50 e0       	ldi	r21, 0x00	; 0
 2c8:	61 e0       	ldi	r22, 0x01	; 1
 2ca:	70 e0       	ldi	r23, 0x00	; 0
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_VoidSetPinValue>
	led_intialize(5,PORT_A);
 2d4:	60 e0       	ldi	r22, 0x00	; 0
 2d6:	85 e0       	ldi	r24, 0x05	; 5
 2d8:	0e 94 85 01 	call	0x30a	; 0x30a <led_intialize>
	Relay_intialize(3,PORT_A);
 2dc:	60 e0       	ldi	r22, 0x00	; 0
 2de:	83 e0       	ldi	r24, 0x03	; 3
 2e0:	0e 94 91 01 	call	0x322	; 0x322 <Relay_intialize>
	 button_init(2, PORT_A);
 2e4:	60 e0       	ldi	r22, 0x00	; 0
 2e6:	70 e0       	ldi	r23, 0x00	; 0
 2e8:	82 e0       	ldi	r24, 0x02	; 2
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	0e 94 79 01 	call	0x2f2	; 0x2f2 <button_init>
 2f0:	ff cf       	rjmp	.-2      	; 0x2f0 <main+0x3c>

Disassembly of section .text.__dummy_fini:

00000358 <_fini>:
 358:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000035a <__funcs_on_exit>:
 35a:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

0000035c <__simulator_exit>:
 35c:	08 95       	ret

Disassembly of section .text.exit:

0000033a <exit>:
 33a:	ec 01       	movw	r28, r24
 33c:	0e 94 ad 01 	call	0x35a	; 0x35a <__funcs_on_exit>
 340:	0e 94 ac 01 	call	0x358	; 0x358 <_fini>
 344:	ce 01       	movw	r24, r28
 346:	0e 94 ae 01 	call	0x35c	; 0x35c <__simulator_exit>
 34a:	ce 01       	movw	r24, r28
 34c:	0e 94 aa 01 	call	0x354	; 0x354 <_Exit>

Disassembly of section .text._Exit:

00000354 <_Exit>:
 354:	0e 94 52 00 	call	0xa4	; 0xa4 <_exit>
